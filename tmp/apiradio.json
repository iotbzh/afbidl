{
  "afbidl": "0.1",
  "info": {
    "version": "0.1",
    "maintainer": "Matt Ranostay (Konsulko)",
    "description": "Radio service manages and reports radio configuration changes (eg. frequency, band, ....) and allows requesting infos (RDS,...)",
    "apiname": "radio",
    "author": "AGL",
    "title": "Service for radio reception",
    "homepage": "https://gerrit.automotivelinux.org/gerrit/apps/agl-service-radio"
  },
  "verbs": {
    "rds": {
      "reply": {
        "success": {
          "$ref": "#/schemas/rds/reply"
        },
        "_": "Fails if not supported by the radio backend"
      },
      "request": {
        "$ref": "#/schemas/none"
      },
      "description": "Get Radio Data System information"
    },
    "stop_scan": {
      "reply": {
        "success": {
          "triggers": "scan-stop",
          "schema": {
            "$ref": "#/schemas/none"
          }
        }
      },
      "request": {
        "$ref": "#/schemas/none"
      },
      "description": "Stop station scan"
    },
    "band_supported": {
      "reply": {
        "success": {
          "$ref": "#/schemas/band/supported_bands"
        },
        "_": "Fails if the band/modulation is invalid"
      },
      "request": {
        "$ref": "#/schemas/band/get"
      },
      "description": "Check band support (NB : no way to get list all supported bands)"
    },
    "stop": {
      "reply": {
        "success": {
          "description": "playing status must be \"stopped\"",
          "schema": {
            "$ref": "#/schemas/playing/status"
          }
        }
      },
      "request": {
        "$ref": "#/schemas/none"
      },
      "description": "Stop radio playback"
    },
    "start": {
      "reply": {
        "success": {
          "description": "playing status must be \"playing\"",
          "schema": {
            "$ref": "#/schemas/playing/status"
          }
        }
      },
      "request": {
        "$ref": "#/schemas/none"
      },
      "description": "Start radio playback"
    },
    "subscribe": {
      "reply": {
        "success": {
          "schema": {
            "$ref": "#/schemas/none"
          },
          "triggers": "start-signaling"
        }
      },
      "request": {
        "$ref": "#/schemas/subscription"
      },
      "description": "Request subscription to an event"
    },
    "frequency": {
      "reply": {
        "success": {
          "$ref": "#/schemas/frequency/get"
        },
        "_": "Fails if frequency value is NaN (but no check on the value, nor on set_frequency() return value...)"
      },
      "request": {
        "$ref": "#/schemas/frequency/set"
      },
      "description": "Set/Get frequency (NB: we can't just get the value on request)"
    },
    "scan_start": {
      "reply": {
        "success": {
          "when-state": {
            "scanning": "idle"
          },
          "triggers": "scan-start",
          "schema": {
            "$ref": "#/schemas/none"
          }
        },
        "_": "Fails if direction is invalid"
      },
      "request": {
        "$ref": "#/schemas/start_scan"
      },
      "description": "Start station scan (in a given direction)"
    },
    "frequency_step": {
      "reply": {
        "success": {
          "$ref": "#/schemas/frequency/step"
        }
      },
      "request": {
        "$ref": "#/schemas/band/get"
      },
      "description": "Get frequency step"
    },
    "band": {
      "reply": {
        "success": {
          "$ref": "#/schemas/band/get"
        },
        "_": "Fails if the band/modulation is invalid"
      },
      "request": {
        "$ref": "#/schemas/band/set"
      },
      "description": "Set/Get band (NB : same as frequency, no standalone get)"
    },
    "frequency_range": {
      "reply": {
        "success": {
          "$ref": "#/schemas/frequency/range"
        },
        "_": "Fails if band/modulation is unknown."
      },
      "request": {
        "$ref": "#/schemas/band/get"
      },
      "description": "Get frequency range (for a given band/modulation)"
    },
    "unsubscribe": {
      "reply": {
        "success": {
          "schema": {
            "$ref": "#/schemas/none"
          },
          "triggers": "stop-signaling"
        }
      },
      "request": {
        "$ref": "#/schemas/subscription"
      },
      "description": "Cancel subscription to an event"
    },
    "stereo_mode": {
      "reply": {
        "success": {
          "schema": {
            "$ref": "#/schemas/stereo_mode"
          }
        },
        "_": "Fails if passed an invalid stereo mode"
      },
      "request": {
        "$ref": "#/schemas/stereo_mode"
      },
      "description": "Set/Get stereo_mode (NB: we can't just get the value on request)"
    }
  },
  "state-machines": {
    "scanning": {
      "states": [
        "idle",
        "progress"
      ],
      "scope": "global",
      "initial": "idle",
      "transitions": {
        "scan-stop-transition": {
          "to": "progress",
          "trigged-by": "stop-scan",
          "from": "idle"
        },
        "scan-start-transition": {
          "to": "progress",
          "trigged-by": "start-scan",
          "from": "idle"
        }
      },
      "description": "Indicates if the backend is currently scanning frequency"
    },
    "signaling": {
      "states": [
        true,
        false
      ],
      "scope": "session",
      "initial": true,
      "transitions": [
        [
          true,
          false,
          "start-signaling"
        ],
        [
          false,
          true,
          "stop-signaling"
        ]
      ],
      "description": "Emits events to listeners"
    }
  },
  "tools": {
    "doc": {
      "version": null,
      "author": null,
      "keywords": "radio",
      "id": "radio-api",
      "chapters": [
        {
          "url": "abstract.md",
          "name": "Abstract"
        },
        {
          "url": "userguide.md",
          "name": "User Guide"
        }
      ],
      "src_prefix": "api-radio"
    },
    "afb-genskel": {
      "postfix": "_cb",
      "scope": "static",
      "prefix": "req_",
      "init": "init"
    }
  },
  "events": {
    "status": {
      "when-state": {
        "signaling": true
      },
      "description": "event emitted when playing status changes.",
      "schema": {
        "$ref": "#/schemas/playing/status"
      }
    },
    "frequency": {
      "when-state": {
        "signaling": true
      },
      "description": "event emitted when a new frequency is tuned (TBC)",
      "schema": {
        "$ref": "#/schemas/frequency/event"
      }
    },
    "station_found": {
      "when-state": {
        "scanning": "progress",
        "signaling": true
      },
      "description": "event emitted when a valid station is tuned (frequency with a good S/N ration ? TBC)",
      "schema": {
        "$ref": "#/schemas/frequency/event"
      }
    }
  },
  "schemas": {
    "none": {
      "const": null,
      "description": null,
      "title": "no value, just null"
    },
    "rds": {
      "reply": {
        "success": {
          "title": null,
          "required": [
            "rds"
          ],
          "type": "object",
          "properties": {
            "rds": {
              "type": "string",
              "title": "\"playing now\" informations"
            }
          },
          "description": "object used to retreive Radio Data System information"
        }
      }
    },
    "band": {
      "supported_bands": {
        "contains": {
          "$ref": "#/schemas/types/band"
        },
        "type": "array",
        "description": "list of bands/modulations supported by the radio backend",
        "title": null
      },
      "set": {
        "title": null,
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/schemas/types/band"
          }
        },
        "description": null
      },
      "get": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/schemas/types/band"
          }
        },
        "title": null
      }
    },
    "frequency": {
      "step": {
        "title": null,
        "required": [
          "step"
        ],
        "type": "object",
        "properties": {
          "step": {
            "type": "number",
            "title": "frequency step"
          }
        },
        "description": "object used to retreive the increment between 2 tunable frequencies"
      },
      "range": {
        "title": null,
        "required": [
          "min",
          "max"
        ],
        "type": "object",
        "properties": {
          "max": {
            "type": "number",
            "title": "Maximal frequency for the range"
          },
          "min": {
            "type": "number",
            "title": "Minimal frequency for the range"
          }
        },
        "description": "object used to retreive minimum and maximum frequency for a given modulation"
      },
      "set": {
        "title": null,
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "description": "desired frequency to be tuned",
            "title": "frequency value"
          }
        },
        "description": "object used to set the tuned frequency"
      },
      "event": {
        "title": null,
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "title": "frequency value"
          }
        },
        "description": null
      },
      "get": {
        "title": null,
        "required": [
          "frequency"
        ],
        "type": "object",
        "properties": {
          "frequency": {
            "type": "number",
            "description": "frequency currently tuned",
            "title": "frequency value"
          }
        },
        "description": "object used to retreive tuned frequency"
      }
    },
    "start_scan": {
      "request": {
        "title": null,
        "required": [
          "direction"
        ],
        "type": "object",
        "properties": {
          "direction": {
            "enum": [
              "forward, backward"
            ]
          }
        },
        "description": "object used to pass the direction of the frequency scan"
      }
    },
    "stereo_mode": {
      "title": null,
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/schemas/types/stereo_mode"
        }
      },
      "description": "Object used to pass a stereo mode (NB : stereo is either true or false. Polyphony is more general, does it make sense here ?)"
    },
    "playing": {
      "status": {
        "title": null,
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "enum": [
              "playing",
              "stopped"
            ]
          }
        },
        "description": "Object used to return the playing status"
      }
    },
    "types": {
      "band": {
        "enum": [
          "AM",
          "FM"
        ],
        "type": "string",
        "description": "Enumeration of valid frquency bands/modulations values as string",
        "title": "Frequency band (modulation)"
      },
      "stereo_mode": {
        "enum": [
          "mono",
          "stereo"
        ],
        "type": "string",
        "description": "Enumeration of valid stereo modes",
        "title": "Stereo mode"
      }
    },
    "subscription": {
      "title": null,
      "required": [
        "value"
      ],
      "type": "object",
      "properties": {
        "value": {
          "enum": [
            "frequency",
            "station_found",
            "status"
          ]
        }
      },
      "description": "describes a subscription to an event"
    }
  }
}
